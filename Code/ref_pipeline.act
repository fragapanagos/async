// non-cmos-implementable reference for pipeline.act
import "channel.act";
import "test.act";

namespace buffer {
    export
    template <pint N>
    defproc PCHB (globals g; e1of<N> l, r) {
    }
    export
    template <pint N>
    defproc WCHB (globals g; e1of<N> l, r) {
        // Weak-condition logic half buffer
        prs<g.Vdd, g.GND> {
            (: n : N :
                ~r.e & l.m.n[n] -> r.m.n[n]+
                g.pReset | r.e & ~l.m.n[n] -> r.m.n[n]-
            )

            (| : n : N : r.m.n[n]) => l.e+
        }
    }
    namespace test {
        export
        template <pint N, M>
        defproc TEST_PCHB (globals g) {
            active_handshaker<1> s(g,,);
            passive_handshaker<1> r(,);
            PCHB<N> pchb[M];
            (; m : M : pchb[m].g = g;)

            pchb[0].l.m.n[0] = s.o[0];
            (; n : 1..N-1 : pchb[0].l.m.n[n] = g.GND;)
            pchb[0].l.e = s.i[0];

            pchb[M-1].r.m.n[0] = r.i[0];
            pchb[M-1].r.e = r.o[0];

            (; m : M-1 :
                pchb[m].r = pchb[m+1].l;
            )
        }
        export
        template <pint N, M>
        defproc TEST_WCHB (globals g) {
            active_handshaker<1> s(g,,);
            passive_handshaker<1> r(,);
            WCHB<N> wchb[M];
            (; m : M : wchb[m].g = g;)

            wchb[0].l.m.n[0] = s.o[0];
            (; n : 1..N-1 : wchb[0].l.m.n[n] = g.GND;)
            wchb[0].l.e = s.i[0];

            wchb[M-1].r.m.n[0] = r.i[0];
            wchb[M-1].r.e = r.o[0];

            (; m : M-1 :
                wchb[m].r = wchb[m+1].l;
            )
        }
    }
}

