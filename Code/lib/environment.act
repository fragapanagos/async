import "globals.act";
import "channel.act";
import "comm.act";

export
template <pint M, N>
defproc SOURCE_random_aMx1ofN (globals g; aMx1ofN<M, N> d) {
    // sources random aMx1ofN data
    (;m:M:
        (;n0:0..N-1:
            (;n1:n0..N-1:
                [n0 != n1 -> spec{ mk_exclhi(d.m[m].n[n0], d.m[m].n[n1]) } ]
            )
        )
    )
    prs {
        (:m:M:
            (:n:N:
                ~g.sReset & ~d.a -> d.m[m].n[n]+
                g.pReset | d.a -> d.m[m].n[n]-
            )
        )
    }
}

export
template <pint M, N>
defproc SINK_aMx1ofN (globals g; aMx1ofN<M, N> d) {
    VN_aMx1ofN<M, N> vn(g, d);
}

/*---------------------------------------------------------------------------*/

export
template <pint N>
defproc SOURCE_random_a1ofN (globals g; a1of<N> d) {
    // sources random a1ofN data
    SOURCE_random_aMx1ofN<1, N> src(g,);
    src.d.m[0].d = d.m.d;
    src.d.a = d.a;
}

export
defproc SOURCE_random_a1of2 (globals g; a1of2 d) {
    // sources random a1of2 data
    SOURCE_random_aMx1ofN<1, 2> src(g,);
    src.d.m[0].d = d.m.d;
    src.d.a = d.a;
}

export
defproc SOURCE_random_a1of1 (globals g; a1of1 d) {
    // sources random a1of1 data
    SOURCE_random_aMx1ofN<1, 1> src(g,);
    src.d.m[0].d[0] = d.d;
    src.d.a = d.a;
}

/*---------------------------------------------------------------------------*/

export
template <pint M, N>
defproc SOURCE_random_eMx1ofN (globals g; eMx1ofN<M, N> d) {
    // sources random eMx1ofN data
    (;m:M:
        (;n0:0..N-1:
            (;n1:n0..N-1:
                [n0 != n1 -> spec{ mk_exclhi(d.m[m].n[n0], d.m[m].n[n1]) } ]
            )
        )
    )
    prs {
        (:m:M:
            (:n:N:
                ~g.sReset & d.e -> d.m[m].n[n]+
                g.pReset | ~d.e -> d.m[m].n[n]-
            )
        )
    }
}

export
template <pint M, N>
defproc SINK_eMx1ofN (globals g; eMx1ofN<M, N> d) {
    VN_eMx1ofN<M, N> vn(g, d);
}

/*---------------------------------------------------------------------------*/

export
template <pint N>
defproc SOURCE_random_e1ofN (globals g; e1of<N> d) {
    // sources random e1ofN data
    SOURCE_random_eMx1ofN<1, N> src(g,);
    src.d.m[0].d = d.m.d;
    src.d.e = d.e;
}

export
defproc SOURCE_random_e1of2 (globals g; e1of2 d) {
    // sources random e1of2 data
    SOURCE_random_eMx1ofN<1, 2> src(g,);
    src.d.m[0].d = d.m.d;
    src.d.e = d.e;
}

export
defproc SOURCE_random_e1of1 (globals g; e1of1 d) {
    // sources random e1of1 data
    SOURCE_random_eMx1ofN<1, 1> src(g,);
    src.d.m[0].d[0] = d.d;
    src.d.e = d.e;
}

/*---------------------------------------------------------------------------*/

export
template <pint N>
defproc active_handshaker(globals g; bool i[N], o[N]) {
    // a simple active handshaker
    (; n : N :
        prs <g.Vdd,g.GND> {
            ~g.sReset & ~i[n] -> o[n]+
            g.pReset  | i[n]  -> o[n]-
        }
    )
}

export
template <pint N>
defproc _active_handshaker(globals g; bool _i[N], _o[N]) {
    // active low version of active_handshaker
    (; n : N :
        prs <g.Vdd,g.GND> {
            g._sReset & _i[n]   -> _o[n]-
            ~g._pReset | ~_i[n] -> _o[n]+
        }
    )
}

export
template <pint N>
defproc passive_handshaker(bool i[N], o[N]) {
    // a simple passive handshaker
    (; n : N :
        prs {
            i[n]  => o[n]+ // just a wire with delay
        }
    )
}

/*---------------------------------------------------------------------------*/

namespace test {
    export
    template <pint M, N>
    defproc TEST_SOURCE_aMx1ofN (globals g) {
        SOURCE_random_aMx1ofN<M, N> src(g,);
        SINK_aMx1ofN<M, N> sink;
        src.d = sink.d;
    }

    export
    template <pint M, N>
    defproc TEST_SOURCE_eMx1ofN (globals g) {
        SOURCE_random_eMx1ofN<M, N> src(g,);
        SINK_eMx1ofN<M, N> sink;
        src.d = sink.d;
    }

    export
    template <pint N>
    defproc TEST_active_passive_handshakers(globals g) {
        // tests active and passive handshakers
        active_handshaker<N> a(g,,);
        passive_handshaker<N> p(,);
        
        a.i = p.o;
        a.o = p.i;
    }
}
