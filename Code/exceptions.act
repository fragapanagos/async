import "environment.act";
import "arbiter.act";

defproc PRECISE_EXCEPT_fast (globals g; bool cr, ce, sr, se) {
    // *[[cr->c+;[~cr];c- | sr->s+;[~sr];s-]]
    // *[[c->[sr];ste-;[~sr];ce-;ste+;[~c];ce+
    //   []s->sfe-;[~s];sfe+
    //  ]]
    // *[[~ste|~sfe];se-;[ste&sfe];se+]
    arbiter::ARB arb(,);
    arb.i[0] = cr;
    arb.i[1] = sr;
    bool c = arb.o[0];
    bool s = arb.o[1];
    bool ste, sfe;

    prs <g.Vdd, g.GND> {
        g.pReset | ~ce -> ste+
        ce & c & sr -> ste-

        ~s -> sfe+
        s -> sfe-

        ste & ~c -> ce+
        ~ste & ~sr -> ce-

        ste & sfe => se+
    }
}

defproc PRECISE_EXCEPT_cheap (globals g; bool cr, ce, sr, se) {
    // *[[cr->c+;[~cr];c- | sr->s+;[~sr];s-]]
    // *[[c->[sr];ste-;[~sr];ce-;[~c];ste+;ce+
    //   []s->sfe-;[~s];sfe+
    //  ]]
    // *[[~ste|~sfe];se-;[ste&sfe];se+]
    arbiter::ARB arb(,);
    arb.i[0] = cr;
    arb.i[1] = sr;
    bool c = arb.o[0];
    bool s = arb.o[1];
    bool ste, sfe;

    prs <g.Vdd, g.GND> {
        ~c -> ste+
        c & sr -> ste-

        ~s -> sfe+
        s -> sfe-

        ste | sr => ce+

        ste & sfe => se+
    }
}

export
defproc PRECISE_EXCEPT (globals g; bool cr, ce, sr, se) {
    // PRECISE_EXCEPT_fast _(g, cr, ce, sr, se);
    PRECISE_EXCEPT_cheap _(g, cr, ce, sr, se);
}

namespace test {
    export
    defproc PRECISE_EXCEPT (globals g) {
        SOURCE_random_e1of1 c(g,);
        SOURCE_random_e1of1 p(g,);
        ::PRECISE_EXCEPT _(g, c.d.d, c.d.e, p.d.d, p.d.e);
    }
} // namespace test

globals g;
test::PRECISE_EXCEPT test(g);
