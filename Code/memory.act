import "globals.act";
import "channel.act";
import "environment.act";

export
defproc BITCELL (globals g; a1of2 d) {
    bool bf, bt;
    bool _da;
    prs<g.Vdd, g.GND> {
        [weak=1] bt => bf- // cross-coupled inverters
        [weak=1] bf => bt-
        d.f -> bt-
        d.t -> bf-

        ~d.f & ~d.t -> _da+
        [weak=1] (d.f & bf) | (d.t & bt) -> _da-

        [weak=1] d.a => _da- // staticizer

        _da => d.a-
    }
}

export
defproc BITCELL_GATED_6T (globals g; a1of2 d; bool we) {
    bool bf, bt;
    bool bf_, bt_;
    bool _da;
    prs<g.Vdd, g.GND> {
        // cross-coupled inverters
        [weak=1] bt => bf-
        [weak=1] bf => bt-
    
        d.t -> bf_-
        [weak=1] bf & we -> bf_+
    
        d.f -> bt_-
        [weak=1] bt & we -> bt_+
    
        [weak=1] ~bf_ & we -> bf-
        [weak=1] ~bt_ & we -> bt-
    
        ~d.f & ~d.t -> _da+
        [weak=1] d.f & bf_ | d.t & bt_ -> _da-
    
        // staticizer
        [weak=1] d.a => _da-
    
        _da => d.a-
    }
}

export
defproc BITCELL_GATED_8T (globals g; a1of2 d; bool we) {
    bool bf, bt;
    bool _da;
    prs<g.Vdd, g.GND> {
        // cross-coupled inverters
        [weak=1] bt => bf-
        [weak=1] bf => bt-
        d.f & we -> bt-
        d.t & we -> bf-
    
        ~d.f & ~d.t -> _da+
        [weak=1] d.f & bf & we | d.t & bt & we -> _da-
    
        // staticizer
        [weak=1] d.a => _da-
    
        _da => d.a-
    }
}

export
defproc BITCELL_GATED_CTRL_6T (globals g; a1of2 x, y; bool we) {
    // Controls an individual gated bitcell
    x.d = y.d;
    prs<g.Vdd, g.GND> {
        x.d[0] | x.d[1] => we+

        we & y.a -> x.a+
        ~we & ~y.a -> x.a-
    }
}

export
defproc BITCELL_GATED_CTRL_8T (globals g; a1of2 x, y; bool we) {
    // Controls an individual gated bitcell
    x.d = y.d;
    prs<g.Vdd, g.GND> {
        x.d[0] | x.d[1] => we+

        y.a -> x.a+
        ~we & ~y.a -> x.a-
    }
}

export
template <pint XD, YW>
defproc BITCELL_ARRAY (globals g; a1of2 d[XD]; bool we[YW]) {
    // XD x YW array of gated bitcells
    // XD data inputs
    // YW words
    // BITCELL_GATED bits[XD][YW];
    // (;xd:XD:
    //     (;yw:YW:
    //         bits[xd][yw].g = g;
    //         bits[xd][yw].d = d[xd];
    //         bits[xd][yw].we = we[yw];
    //     )
    // )
}

namespace test {
    export
    defproc TEST_BITCELL (globals g) {
        BITCELL bit(g,);
        SOURCE_random_a1of2 src(g, bit.d);
    }

    export
    defproc TEST_BITCELL_GATED_6T (globals g) {
        BITCELL_GATED_6T bit(g,,);
        BITCELL_GATED_CTRL_6T ctrl(g,, bit.d, bit.we);
        SOURCE_random_a1of2 src(g, ctrl.x);
    }

    export
    defproc TEST_BITCELL_GATED_8T (globals g) {
        BITCELL_GATED_8T bit(g,,);
        BITCELL_GATED_CTRL_8T ctrl(g,, bit.d, bit.we);
        SOURCE_random_a1of2 src(g, ctrl.x);
    }
} // namespace test

globals g;
test::TEST_BITCELL test_bc(g);
test::TEST_BITCELL_GATED_6T test_bcg6t(g);
test::TEST_BITCELL_GATED_8T test_bcg8t(g);
