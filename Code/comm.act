// Defines processes used in data communication
import "channel.act";
import "logic.act";

export
template <pint M, N>
defproc VN (aMx1ofN<M, N> d) {
    // detects data validity/neutrality on d
    // [V(d.m)];d.a+;[~V(d.m)];d.a-
    C_TREE<M> c_tree(,);
    
    [ N > 2 ->
        OR<N> or[M];
        (; m : M :
            (; n : N :
                or[m].i[n] = d.m[m].n[n];
            )
        )

        (; k : M :
            or[k].o = c_tree.i[k];
        )
        c_tree.o = d.a;
    [] N = 2 ->
        NOR nor[M];
        (; m : M :
            (; n : N :
                nor[m].i[n] = d.m[m].n[n];
            )
        )

        (; k : M :
            nor[k].o = c_tree.i[k];
        )
        bool _o;
        c_tree.o = _o;
        prs {
            _o => d.a-
        }
    ]
}

export
template <pint M, N>
defproc _VN (c1of<N> _d[M]; bool _o) {
    // active low version of VN
    _OR<N> _or[M];
    (; m : M :
        (; n : N :
            _or[m]._i[n] = _d[m].n[n];
        )
    )

    C_TREE<M> c_tree(,_o);

    (; k : M :
        _or[k]._o = c_tree.i[k];
    )
}

export
template <pint M, N>
defproc VN_A (eMx1ofN<M, N> d) {
    // active version of VN
    // d.e+;[V(d.m)];d.e-;[~V(d.m)]
    OR<N> or[M];
    (; m : M :
        (; n : N :
            or[m].i[n] = d.m[m].n[n];
        )
    )

    C_TREE<M> c_tree(,);
    (; k : M :
        or[k].o = c_tree.i[k];
    )

    prs {
        c_tree.o => d.e-
    }
}

template <pint M, N>
defproc Mx1ofN_WIRES (c1of<N> d[M]; bool o[M*N]) {
    // Connect a Mx1ofN channel to NN wires
    pint MN = M*N;
    (; n : N :
        d[0].n[n] = o[n];
    )
    [ M > 1 ->
        Mx1ofN_WIRES<M-1, N> w(d[1..M-1], o[N..MN-1]);
    ]
}

export
template <pint M, N, NN>
defproc N_DETECT (aMx1ofN<M, N> d) {
    // detects data neutrality on d
    bool x[NN];
    Mx1ofN_WIRES<M, N> wires(d.m, x);
    OR<NN> or(x, d.a);
}

export
template <pint M, N>
defproc A_TO_E (aMx1ofN<M, N> i; eMx1ofN<M, N> o) {
    // converts aMx1ofN to eMx1ofN
    // [o.e];i.a-;[I];O+;[~o.e];i.a+;[~I];O-
    prs {
        (: m : M :
            (: n : N :
                i.m[m].n[n] => o.m[m].n[n]+ // wires. prs to test delays
            )
        )
        o.e => i.a-
    }
}
